// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StockBikes.Migrations
{
    [DbContext(typeof(BikeDbContext))]
    [Migration("20240215215205_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.1.24081.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StockBikes.Context.Entities.Bike", b =>
                {
                    b.Property<int>("BikeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BikeID"));

                    b.Property<int>("LeftPedalID")
                        .HasColumnType("int");

                    b.Property<int>("LeftWheelID")
                        .HasColumnType("int");

                    b.Property<int>("RightPedalID")
                        .HasColumnType("int");

                    b.Property<int>("RightWheelID")
                        .HasColumnType("int");

                    b.Property<int>("SeatID")
                        .HasColumnType("int");

                    b.HasKey("BikeID");

                    b.HasIndex("LeftPedalID");

                    b.HasIndex("LeftWheelID");

                    b.HasIndex("RightPedalID");

                    b.HasIndex("RightWheelID");

                    b.HasIndex("SeatID");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("StockBikes.Context.Entities.Frame", b =>
                {
                    b.Property<int>("FrameID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrameID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FrameID");

                    b.ToTable("Frames");
                });

            modelBuilder.Entity("StockBikes.Context.Entities.Pedal", b =>
                {
                    b.Property<int>("PedalID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PedalID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PedalID");

                    b.ToTable("Pedals");
                });

            modelBuilder.Entity("StockBikes.Context.Entities.Seat", b =>
                {
                    b.Property<int>("SeatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeatID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SeatID");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("StockBikes.Context.Entities.Tube", b =>
                {
                    b.Property<int>("TubeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TubeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TubeID");

                    b.ToTable("Tubes");
                });

            modelBuilder.Entity("StockBikes.Context.Entities.Wheel", b =>
                {
                    b.Property<int>("WheelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WheelID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FrameID")
                        .HasColumnType("int");

                    b.Property<int>("TubeID")
                        .HasColumnType("int");

                    b.HasKey("WheelID");

                    b.HasIndex("FrameID");

                    b.HasIndex("TubeID");

                    b.ToTable("Wheels");
                });

            modelBuilder.Entity("StockBikes.Context.Entities.Bike", b =>
                {
                    b.HasOne("StockBikes.Context.Entities.Pedal", "LeftPedal")
                        .WithMany()
                        .HasForeignKey("LeftPedalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockBikes.Context.Entities.Wheel", "LeftWheel")
                        .WithMany()
                        .HasForeignKey("LeftWheelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockBikes.Context.Entities.Pedal", "RightPedal")
                        .WithMany()
                        .HasForeignKey("RightPedalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockBikes.Context.Entities.Wheel", "RightWheel")
                        .WithMany()
                        .HasForeignKey("RightWheelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockBikes.Context.Entities.Seat", "Seat")
                        .WithMany()
                        .HasForeignKey("SeatID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeftPedal");

                    b.Navigation("LeftWheel");

                    b.Navigation("RightPedal");

                    b.Navigation("RightWheel");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("StockBikes.Context.Entities.Wheel", b =>
                {
                    b.HasOne("StockBikes.Context.Entities.Frame", "Frame")
                        .WithMany()
                        .HasForeignKey("FrameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StockBikes.Context.Entities.Tube", "Tube")
                        .WithMany()
                        .HasForeignKey("TubeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Frame");

                    b.Navigation("Tube");
                });
#pragma warning restore 612, 618
        }
    }
}
